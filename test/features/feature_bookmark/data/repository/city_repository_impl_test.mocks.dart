// Mocks generated by Mockito 5.2.0 from annotations
// in weatherBs/test/features/feature_bookmark/data/repository/city_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weatherBs/features/feature_bookmark/data/data_source/local/city_dao.dart'
    as _i2;
import 'package:weatherBs/features/feature_bookmark/domain/entities/city_model.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [CityDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockCityDao extends _i1.Mock implements _i2.CityDao {
  MockCityDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.City>> getAllCity() =>
      (super.noSuchMethod(Invocation.method(#getAllCity, []),
              returnValue: Future<List<_i4.City>>.value(<_i4.City>[]))
          as _i3.Future<List<_i4.City>>);
  @override
  _i3.Future<_i4.City?> findCityByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#findCityByName, [name]),
          returnValue: Future<_i4.City?>.value()) as _i3.Future<_i4.City?>);
  @override
  _i3.Future<void> insertCity(_i4.City? person) =>
      (super.noSuchMethod(Invocation.method(#insertCity, [person]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteCityByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#deleteCityByName, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}
