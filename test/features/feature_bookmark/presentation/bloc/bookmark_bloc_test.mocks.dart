// Mocks generated by Mockito 5.2.0 from annotations
// in weatherBs/test/features/feature_bookmark/presentation/bloc/bookmark_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weatherBs/core/resources/data_state.dart' as _i2;
import 'package:weatherBs/core/usecases/UseCase.dart' as _i6;
import 'package:weatherBs/features/feature_bookmark/domain/entities/city_model.dart'
    as _i5;
import 'package:weatherBs/features/feature_bookmark/domain/use_cases/delete_city_usecase.dart'
    as _i9;
import 'package:weatherBs/features/feature_bookmark/domain/use_cases/get_all_city_usecase.dart'
    as _i3;
import 'package:weatherBs/features/feature_bookmark/domain/use_cases/get_city_usecase.dart'
    as _i7;
import 'package:weatherBs/features/feature_bookmark/domain/use_cases/save_city_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDataState_0<T> extends _i1.Fake implements _i2.DataState<T> {}

/// A class which mocks [GetAllCityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllCityUseCase extends _i1.Mock implements _i3.GetAllCityUseCase {
  MockGetAllCityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<List<_i5.City>>> call(_i6.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i2.DataState<List<_i5.City>>>.value(
                  _FakeDataState_0<List<_i5.City>>()))
          as _i4.Future<_i2.DataState<List<_i5.City>>>);
}

/// A class which mocks [GetCityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCityUseCase extends _i1.Mock implements _i7.GetCityUseCase {
  MockGetCityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<_i5.City?>> call(String? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i2.DataState<_i5.City?>>.value(
                  _FakeDataState_0<_i5.City?>()))
          as _i4.Future<_i2.DataState<_i5.City?>>);
}

/// A class which mocks [SaveCityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveCityUseCase extends _i1.Mock implements _i8.SaveCityUseCase {
  MockSaveCityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<_i5.City>> call(String? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i2.DataState<_i5.City>>.value(
                  _FakeDataState_0<_i5.City>()))
          as _i4.Future<_i2.DataState<_i5.City>>);
}

/// A class which mocks [DeleteCityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCityUseCase extends _i1.Mock implements _i9.DeleteCityUseCase {
  MockDeleteCityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<String>> call(String? params) => (super.noSuchMethod(
          Invocation.method(#call, [params]),
          returnValue:
              Future<_i2.DataState<String>>.value(_FakeDataState_0<String>()))
      as _i4.Future<_i2.DataState<String>>);
}
